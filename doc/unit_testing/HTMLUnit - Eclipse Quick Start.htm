<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
		<title>Running HTMLUnit unit tests in Eclipse</title>
		<style type="text/css">
			body {
				background: rgb(240,240,240);
			}
			
			li {
				margin-top: 4pt;
			}
			
			ol {
				padding-left: 5pt;
				padding-right: 5pt;
			}
			
			pre {
				border: solid 1pt black;
				margin-left: 10pt;
				margin-right: 10pt;
				background: rgb(240,235,235);
			}
		</style>
	</head>
	<body>
		<h2>HTMLUnit in Eclipse Quick Start</h2>
		<p>Below is a brief description of the steps needed to get HTMLUnit unit tests
		up and running in Eclipse.</p>
		<ol>
			<li>Be sure to setup the required environment variables as discussed in
			HTMLUnit-command-line.txt, section 10. Alternately, you can define these
			environment variables in your unit test run configuration. Below is a list
			of the required environment variables
			<ul>
				<li>HTMLUNIT_SERVER_NAME</li>
				<li>HTMLUNIT_SERVER_PORT</li>
			</ul>
			If you use a unit test that requires database access (subclasses
			AbstractDatabaseTest), then the following environment variables are also
			required.
			<ul>
				<li>HTMLUNIT_DB_HOST</li>
				<li>HTMLUNIT_DB_NAME</li>
				<li>HTMLUNIT_DB_USER</li>
				<li>HTMLUNIT_DB_PASSWORD</li>
			</ul></li>
			<li>Add an alias entry to your httpd.conf file and point that to the
			"www" directory in the framework_tests project. For example:
			<pre>
&lt;IfModule alias_module>
	Alias /htmlunit "E:/jaxer.aptana.com/products/server/framework_tests/www"
&lt;/IfModule></pre></li>
			<li>Configure jaxer as a file handler for the same directory. For example:
			<pre>
&lt;IfModule aptana_module> 
	AddOutputFilter APTANA .html
	AddOutputFilter APTANA .php
	AddHandler APTANA .aptana
	DefaultInitEnv "SystemRoot" "C:\\Windows"
	
	&lt;Directory "E:/jaxer.aptana.com/products/server/framework_tests/www">
	    AptanaWrapper "E:/Jaxer/AptanaServer.exe" .html
	    AptanaWrapper "E:/Jaxer/AptanaServer.exe" .php
	    AptanaWrapper "E:/Jaxer/AptanaServer.exe" .aptana
	    Options ExecCGI
	    allow from all
	&lt;/Directory>
&lt;/IfModule></pre></li>
			<li>Import //depot/products/server/framework_tests as a project into
			Eclipse</li>
			<li>To run a single unit test, right-click it and select Run As->JUnit
			Test. This should display and activate the JUnit View. Note that you can
			run and debug tests by interacting with the JUnit View also.
			<p />
			<img src="run-single-unit-test.png"></img></li>
			<li>Alternately, to run a collection of unit tests, referred to as a suite,
			you can follow the same process by selecting AllTests.java in place of the
			single unit test class. Note that unit tests classes may contain multiple
			tests. You will need to expand the unit test tree item in the JUnit view
			to view each of those tests.</li>
			<li>Note that you can define all environment variables or override your
			existing values using the Environment tab in the run configuration dialog.
			<p />
			<img src="run-config.png"></li>
			<li>Note that all unit tests can be run using
			com.aptana.server.tests.AllTests.java. Likewise, all tests within a given
			group (really Java package) can be run using the AllTests.java file in that
			package. If you add a new package to the unit tests, you will need to follow
			this same pattern of defining an AllTests.java for your package and you will
			need to add a reference to that file in com.aptana.server.tests.AllTests.java.</li>
		</ol>
	</body>
</html>
