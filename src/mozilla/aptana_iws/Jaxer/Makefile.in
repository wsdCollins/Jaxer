# ***** BEGIN LICENSE BLOCK *****
#  Version: GPL 3
# 
#  This program is Copyright (C) 2007-2008 Aptana, Inc. All Rights Reserved
#  This program is licensed under the GNU General Public license, version 3 (GPL).
# 
#  This program is distributed in the hope that it will be useful, but
#  AS-IS and WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE, TITLE, or
#  NONINFRINGEMENT. Redistribution, except as permitted by the GPL,
#  is prohibited.
# 
#  You can redistribute and/or modify this program under the terms of the GPL, 
#  as published by the Free Software Foundation.  You should
#  have received a copy of the GNU General Public License, Version 3 along
#  with this program; if not, write to the Free Software Foundation, Inc., 51
#  Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#  
#  Aptana provides a special exception to allow redistribution of this file
#  with certain other code and certain additional terms
#  pursuant to Section 7 of the GPL. You may view the exception and these
#  terms on the web at http://www.aptana.com/legal/gpl/.
#  
#  You may view the GPL, and Aptana's exception and additional terms in the file
#  titled license-jaxer.html in the main distribution folder of this program.
#  
#  Any modifications to this file must keep this entire header intact.
# 
# ***** END LICENSE BLOCK *****
 
DEPTH		= ../..
topsrcdir	= @top_srcdir@
srcdir		= @srcdir@
VPATH		= @srcdir@
 
RCINCLUDE = Jaxer.rc
	 
include $(DEPTH)/config/autoconf.mk

MODULE		= jaxer
ifeq (,$(filter-out WINNT Darwin,$(OS_ARCH)))
PROGRAM = Jaxer$(BIN_SUFFIX)
else
PROGRAM = jaxer$(BIN_SUFFIX)
endif

MOZILLA_INTERNAL_API = 1

PREF_JS_EXPORTS = $(srcdir)/Jaxer_prefs.js

# hardcode en-US for the moment
AB_CD = en-US
# AB_CD = $(MOZ_UI_LOCALE)

DEFINES += -DAB_CD=$(AB_CD) \
	-DMOZ_APP_VERSION=\"$(MOZ_APP_VERSION)\" \
	-DJAXER_FULL_VERSION=$(JAXER_VERSION).$(JAXER_BUILDID)

ifeq ($(OS_ARCH),SunOS)
DEFINES += -D_XPG4_2
endif

#JAXER_PRO_BUILD = 1

# JaxerPro
ifdef JAXER_PRO_BUILD
DEFINES += -DJAXER_PRO_BUILD
endif

REQUIRES	= \
		aptana \
		embedcomponents \
		pref \
		string \
		necko \
		xpcom \
		xpconnect \
		js \
		dom \
		chrome \
		content \
		xulapp \
		toolkitcomps \
		pipnss \
		$(NULL)

ifdef JAXER_PRO_BUILD
REQUIRES += nss \
		$(ZLIB_REQUIRES) \
		$(NULL)

endif

ifdef MOZ_CRASHREPORTER
REQUIRES += crashreporter
endif

CPPSRCS		= Jaxer.cpp \
        AppDirectoryProvider.cpp \
        PrefObserver.cpp \
        aptMgrCmdReader.cpp \
        aptManagerEvent.cpp \
        $(NULL)
        
PROGOBJS	= Jaxer.$(OBJ_SUFFIX) \
        AppDirectoryProvider.$(OBJ_SUFFIX) \
        PrefObserver.$(OBJ_SUFFIX) \
        aptMgrCmdReader.$(OBJ_SUFFIX) \
        aptManagerEvent.$(OBJ_SUFFIX) \
        $(NULL)

ifdef BUILD_STATIC_LIBS
ifdef _MSC_VER
STATIC_COMPONENTS_LINKER_PATH = -LIBPATH:$(DEPTH)/staticlib
else
STATIC_COMPONENTS_LINKER_PATH = -L$(DEPTH)/staticlib
endif
PROGOBJS += nsStaticComponents.$(OBJ_SUFFIX)

include $(topsrcdir)/config/static-config.mk

EXTRA_DEPS	+= \
	$(STATIC_EXTRA_DEPS) \
	$(NULL)
DEFINES		+= $(STATIC_DEFINES)
CPPSRCS		+= $(STATIC_CPPSRCS)
EXTRA_DSO_LIBS	+= $(STATIC_EXTRA_DSO_LIBS)
            
REQUIRES	+= $(STATIC_REQUIRES)
EXTRA_LIBS	+= $(STATIC_EXTRA_LIBS)

endif

ifneq (,$(filter mac cocoa,$(MOZ_WIDGET_TOOLKIT)))
TK_LIBS := -framework Cocoa $(TK_LIBS)
endif

LIBS		= \
		$(STATIC_COMPONENTS_LINKER_PATH) \
		$(EXTRA_DSO_LIBS) \
		$(MOZ_JS_LIBS) \
		$(XPCOM_LIBS) \
		$(NSPR_LIBS) \
		$(TK_LIBS) \
		$(call EXPAND_LIBNAME_PATH,gkgfx,$(DEPTH)/gfx/src) \
		../consoleListener/$(LIB_PREFIX)aptConsoleListener_s.$(LIB_SUFFIX) \
		../CoreTrace/$(LIB_PREFIX)aptCoreTrace_s.$(LIB_SUFFIX) \
		../eh/events/base/$(LIB_PREFIX)aptEventBaseData_s.$(LIB_SUFFIX) \
		../eh/events/DocInitialized/$(LIB_PREFIX)aptEventDocInitializedData_s.$(LIB_SUFFIX) \
		../eh/events/HTMLParseComplete/$(LIB_PREFIX)aptEventHTMLParseCompleteData_s.$(LIB_SUFFIX) \
		../eh/events/HTMLParseStart/$(LIB_PREFIX)aptEventHTMLParseStartData_s.$(LIB_SUFFIX) \
		../eh/events/HTTPRequest/$(LIB_PREFIX)aptHTTPRequest_s.$(LIB_SUFFIX) \
		../eh/events/HTTPResponse/$(LIB_PREFIX)aptHTTPResponse_s.$(LIB_SUFFIX) \
		../eh/events/Log/$(LIB_PREFIX)aptEventLogData_s.$(LIB_SUFFIX) \
		../eh/events/NewHTMLElement/$(LIB_PREFIX)aptEventNewHTMLElementData_s.$(LIB_SUFFIX) \
		../eh/events/RequestComplete/$(LIB_PREFIX)aptEventRequestCompleteData_s.$(LIB_SUFFIX) \
		../eh/events/RequestStart/$(LIB_PREFIX)aptEventRequestStartData_s.$(LIB_SUFFIX) \
		../eh/events/BeforeScriptEvaluated/$(LIB_PREFIX)aptEventBeforeScriptEvaluatedData_s.$(LIB_SUFFIX) \
		../eh/events/AfterScriptEvaluated/$(LIB_PREFIX)aptEventAfterScriptEvaluatedData_s.$(LIB_SUFFIX) \
		../eh/events/ScriptCompile/$(LIB_PREFIX)aptEventScriptCompileData_s.$(LIB_SUFFIX) \
		../EventTypeManager/$(LIB_PREFIX)aptEventTypeManager_s.$(LIB_SUFFIX) \
		../FCGXStream/$(LIB_PREFIX)aptFCGXStream_s.$(LIB_SUFFIX) \
		../httpdocument/$(LIB_PREFIX)apthttpdocument_s.$(LIB_SUFFIX) \
		../global/$(LIB_PREFIX)aptJaxerGlobal_s.$(LIB_SUFFIX) \
		../managerCmdService/$(LIB_PREFIX)aptmanagercmdservice_s.$(LIB_SUFFIX) \
		$(NULL)


ifdef MOZ_MEMORY
ifneq ($(OS_ARCH),WINNT)
LIBS += -ljemalloc -lX11
endif
endif

ifneq (,$(filter gtk2,$(MOZ_WIDGET_TOOLKIT)))
ifdef MOZ_ENABLE_CAIRO_GFX
EXTRA_LIBS += $(ZLIB_LIBS)
endif
endif

LOCAL_INCLUDES = \
		-I$(srcdir)/.. \
		-I$(srcdir)/../consoleListener \
		-I$(srcdir)/../CoreTrace \
		-I$(srcdir)/../httpdocument \
		$(NULL)

ifdef JAXER_PRO_BUILD
LOCAL_INCLUDES += -I$(topsrcdir)/security/nss/lib/freebl
LIBS += ../../nss/freebl/freebl.$(LIB_SUFFIX)
endif

DEFINES += -DOS_TARGET=\"$(OS_TARGET)\"

ENABLE_CXX_EXCEPTIONS = 1

MOZ_WINCONSOLE = 1

ifeq ($(OS_ARCH),WINNT)
WIN32_EXE_LDFLAGS += -INCREMENTAL:NO -FIXED:NO -OPT:NOICF
OS_LIBS += $(call EXPAND_LIBNAME,ws2_32 comctl32 comdlg32 uuid shell32 ole32 oleaut32 version winspool odbc32)
#ifdef MOZ_ENABLE_CAIRO_GFX
OS_LIBS += $(call EXPAND_LIBNAME,usp10 msimg32)
ifdef MOZ_ENABLE_GLITZ
OS_LIBS += $(call EXPAND_LIBNAME,opengl32)
endif
#endif
endif

ifdef MOZ_CRASHREPORTER
CRASHREPORTER_LIBS = $(DEPTH)/toolkit/crashreporter/$(LIB_PREFIX)exception_handler_s.$(LIB_SUFFIX)
ifeq ($(OS_ARCH),WINNT)
CRASHREPORTER_LIBS += \
	$(DEPTH)/toolkit/crashreporter/google-breakpad/src/client/windows/handler/$(LIB_PREFIX)exception_handler_s.$(LIB_SUFFIX) \
	$(DEPTH)/toolkit/crashreporter/google-breakpad/src/common/windows/$(LIB_PREFIX)breakpad_windows_common_s.$(LIB_SUFFIX)
endif

ifeq ($(OS_ARCH),Darwin)
CRASHREPORTER_LIBS += \
	$(DEPTH)/toolkit/crashreporter/google-breakpad/src/client/$(LIB_PREFIX)minidump_file_writer_s.$(LIB_SUFFIX) \
	$(DEPTH)/toolkit/crashreporter/google-breakpad/src/client/mac/handler/$(LIB_PREFIX)exception_handler_s.$(LIB_SUFFIX) \
	$(DEPTH)/toolkit/crashreporter/google-breakpad/src/common/$(LIB_PREFIX)breakpad_common_s.$(LIB_SUFFIX) \
	$(DEPTH)/toolkit/crashreporter/google-breakpad/src/common/mac/$(LIB_PREFIX)breakpad_mac_common_s.$(LIB_SUFFIX)
endif

ifeq ($(OS_ARCH),Linux)
CRASHREPORTER_LIBS += \
  $(DEPTH)/toolkit/crashreporter/google-breakpad/src/client/linux/handler/$(LIB_PREFIX)exception_handler_s.$(LIB_SUFFIX) \
  $(DEPTH)/toolkit/crashreporter/google-breakpad/src/client/$(LIB_PREFIX)minidump_file_writer_s.$(LIB_SUFFIX) \
  $(DEPTH)/toolkit/crashreporter/google-breakpad/src/common/linux/$(LIB_PREFIX)breakpad_linux_common_s.$(LIB_SUFFIX) \
  $(DEPTH)/toolkit/crashreporter/google-breakpad/src/common/$(LIB_PREFIX)breakpad_common_s.$(LIB_SUFFIX) \
  $(NULL)
endif

ifeq ($(OS_ARCH),SunOS)
CRASHREPORTER_LIBS += \
  $(DEPTH)/toolkit/crashreporter/google-breakpad/src/client/solaris/handler/$(LIB_PREFIX)exception_handler_s.$(LIB_SUFFIX) \
  $(DEPTH)/toolkit/crashreporter/google-breakpad/src/client/$(LIB_PREFIX)minidump_file_writer_s.$(LIB_SUFFIX) \
  $(DEPTH)/toolkit/crashreporter/google-breakpad/src/common/$(LIB_PREFIX)breakpad_common_s.$(LIB_SUFFIX) \
  $(DEPTH)/toolkit/crashreporter/google-breakpad/src/common/solaris/$(LIB_PREFIX)breakpad_solaris_common_s.$(LIB_SUFFIX) \
  $(NULL)
endif

ifeq ($(OS_ARCH),SunOS)
EXTRA_LIBS += -lelf -ldemangle -lCstd -lmd -lxnet
endif

ifdef BUILD_STATIC_LIBS
EXTRA_LIBS += $(CRASHREPORTER_LIBS)
OS_LIBS += $(MOZ_ODBC_LIBS)
else
SHARED_LIBRARY_LIBS += $(CRASHREPORTER_LIBS)
endif
endif

RCFLAGS += -I$(srcdir)

libs::
ifeq ($(OS_ARCH),WINNT)
	$(PERL) -pe 's/(?<!\r)\n/\r\n/g;' < $(topsrcdir)/LICENSE > $(DIST)/bin/LICENSE_MPL
else
	$(INSTALL) $(topsrcdir)/LICENSE	$(DIST)/bin/LICENSE_MPL
endif

DIRS = js

include $(topsrcdir)/config/rules.mk

ifdef BUILD_STATIC_LIBS
include $(topsrcdir)/config/static-rules.mk
endif

ifneq (,$(filter gtk2,$(MOZ_WIDGET_TOOLKIT)))
CXXFLAGS += $(MOZ_GTK2_CFLAGS)
CFLAGS += $(MOZ_GTK2_CFLAGS)
endif

