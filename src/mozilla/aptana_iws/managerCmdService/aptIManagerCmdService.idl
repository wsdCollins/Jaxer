/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 * vim: set sw=4 ts=4 et: */
/* ***** BEGIN LICENSE BLOCK *****
 *  Version: GPL 3
 * 
 *  This program is Copyright (C) 2007-2008 Aptana, Inc. All Rights Reserved
 *  This program is licensed under the GNU General Public license, version 3 (GPL).
 * 
 *  This program is distributed in the hope that it will be useful, but
 *  AS-IS and WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE, TITLE, or
 *  NONINFRINGEMENT. Redistribution, except as permitted by the GPL,
 *  is prohibited.
 * 
 *  You can redistribute and/or modify this program under the terms of the GPL, 
 *  as published by the Free Software Foundation.  You should
 *  have received a copy of the GNU General Public License, Version 3 along
 *  with this program; if not, write to the Free Software Foundation, Inc., 51
 *  Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *  
 *  Aptana provides a special exception to allow redistribution of this file
 *  with certain other code and certain additional terms
 *  pursuant to Section 7 of the GPL. You may view the exception and these
 *  terms on the web at http://www.aptana.com/legal/gpl/.
 *  
 *  You may view the GPL, and Aptana's exception and additional terms in the file
 *  titled license-jaxer.html in the main distribution folder of this program.
 *  
 *  Any modifications to this file must keep this entire header intact.
 * 
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface aptIManagerCmdResponse;

interface aptICmdCompleteCallback;

[scriptable, uuid(D5B435EA-359A-49f6-8C9E-E604F1399122)]
interface aptIManagerCmdService : nsISupports
{
    /*
     * Initialize the service so it can be used.
     * The service cannot be used without being initialized first.
     */
    [noscript] void init(in long socket);

    /**
     * Send a cmd to manager that does not require a response
     */
     void execNoRespCmd(in AUTF8String cmd);

     /**
      * Send a cmd to manager that needs a response.
      * cmd - a string cmd that the other side understands.
      * cb - called when the cmd response is ready.
      * bAsync - determines if the function will return
      *          immediately (== true) or wait for the results.
      * In the case of bAsync == true, the calling thread must
      * wait and process events until the callback function
      * has been called.
      *
      * subsequent call to execNeedRespCmd will fail until the previouse call
      * has completed.
      */
     void execNeedRespCmd(in AUTF8String cmd, in aptICmdCompleteCallback cb, in boolean bAsync);

     /**
      * For setting up the response data.
      */
     [noscript] void setCmdRespData(in string resp);

     /**
      * Send a special end-request cmd to manager
      */
     [noscript] void execEndReqCmd();

     /*
      * Notify any monitor that is waiting.
      */
     [noscript] void notifyPossibleCmdFailure();
};
