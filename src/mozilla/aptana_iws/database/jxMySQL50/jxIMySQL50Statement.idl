/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 * vim: set sw=4 ts=4 et: */
/* ***** BEGIN LICENSE BLOCK *****
 *  Version: GPL 3
 * 
 *  This program is Copyright (C) 2007-2008 Aptana, Inc. All Rights Reserved
 *  This program is licensed under the GNU General Public license, version 3 (GPL).
 * 
 *  This program is distributed in the hope that it will be useful, but
 *  AS-IS and WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE, TITLE, or
 *  NONINFRINGEMENT. Redistribution, except as permitted by the GPL,
 *  is prohibited.
 * 
 *  You can redistribute and/or modify this program under the terms of the GPL, 
 *  as published by the Free Software Foundation.  You should
 *  have received a copy of the GNU General Public License, Version 3 along
 *  with this program; if not, write to the Free Software Foundation, Inc., 51
 *  Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *  
 *  Aptana provides a special exception to allow redistribution of this file
 *  with certain other code and certain additional terms
 *  pursuant to Section 7 of the GPL. You may view the exception and these
 *  terms on the web at http://www.aptana.com/legal/gpl/.
 *  
 *  You may view the GPL, and Aptana's exception and additional terms in the file
 *  titled license-jaxer.html in the main distribution folder of this program.
 *  
 *  Any modifications to this file must keep this entire header intact.
 * 
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "jxIMySQL50.idl"
#include "nsIXPConnect.idl"
// #include "jxIXPCBridge.idl"

interface jxIMySQL50Field;
interface jxIMySQL50ResultSet;


[scriptable, uuid(8dc0c939-1a9a-401e-b0fe-62a1015c4a58)]
interface jxIMySQL50Statement : nsISupports
{

    [noscript] void setMySQL50(in jxIMySQL50 aObj);


    /*************************************************************
     *  close
     *
	 *  Closes this Statement.  
     */
    void close();


    /*************************************************************
     *  errno
     *
     *  Accessor to the error code for the most recently invoked API function that 
     *	can succeed or fail. A return value of zero means that no error occurred.
     */
    unsigned long errno();


    /*************************************************************
     *  error
     *
     *  Accessor to the error code for the most recently invoked API function that 
     *	can succeed or fail. A return value of zero means that no error occurred.
     */
    AString error();


    /**
     * Bind the given value to the parameter at aParamIndex. Index 0
     * denotes the first numbered argument or ?1.
     */
    // void BindDatetimeParameter(in unsigned long aParamIndex, in unsigned long aYear, in unsigned long aMonth, 
    //    in unsigned long aDay, in unsigned long aHour, in unsigned long aMinute, in unsigned long aSecond);
    void bindDatetimeParameter(in unsigned long aParamIndex, in unsigned long aSecond);

    void bindBooleanParameter (in unsigned long aParamIndex, in boolean aValue);
    void bindUTF8StringParameter(in unsigned long aParamIndex,
                               in AUTF8String aValue);

    // This is identical to bindUTF8StringParameter
    void bindUTF8TextParameter(in unsigned long aParamIndex,
                               in AUTF8String aValue);
    void bindStringParameter(in unsigned long aParamIndex, in AString aValue);
    void bindDoubleParameter(in unsigned long aParamIndex, in double aValue);
    void bindInt32Parameter(in unsigned long aParamIndex, in long aValue);
    void bindInt64Parameter(in unsigned long aParamIndex, in long long aValue);
    void bindNullParameter(in unsigned long aParamIndex);
    void bindBlobParameter(in unsigned long aParamIndex,
                         [array,const,size_is(aValueSize)] in octet aValue,
                         in unsigned long aValueSize);

    /*************************************************************
     *  execute
     *
	 *  Execute this Statement.  An array of parameters is provided.
     */
    // unsigned long execute(in nsISupports array);
    unsigned long execute();


    /*************************************************************
     *  init
     *
     */
    [noscript] long init(in AString query);


    /*************************************************************
     *  paramCount
     *
     */
    long paramCount();


    /*************************************************************
     *  SQLState
     *
     */
    AString SQLState();



    /*************************************************************
     *  dataSeek
     *
	 *	Seeks to an arbitrary row in a query result set. The offset 
	 *	value is a row number and should be in the range from 0 to 
	 *	rowCount()-1. 
	 *
	 *	Return Values
	 *
	 *	1 if offset is within valid range, 0 otherwise.
	 */
    boolean dataSeek(in long long offset);


    /*************************************************************
     *  rowCount
     *
     *  Accessor to the row count this Statement is associated with.      
     */
    long long rowCount();

    /*************************************************************
     *  fieldCount
     *
     */
    unsigned long fieldCount();


    /*************************************************************
     *  insertId
     *
     */
    long long insertId();


    /*************************************************************
     *  resultMetadata
     *
     */
    jxIMySQL50ResultSet resultMetadata();

    // jxIMySQL50ResultSet storeResult();



    /*************************************************************
     *  fetch
     *
	 */
    // boolean fetch(in nsISupports array);
    boolean fetch();

    /*************************************************************
     *  from mozStorageValueArray
     *
	 */
    long getInt32(in unsigned long aIndex);
    long long getInt64(in unsigned long aIndex);
    double getDouble(in unsigned long aIndex);
    AUTF8String getUTF8String(in unsigned long aIndex);
    AString getString(in unsigned long aIndex);
    // long getDatetime(in unsigned long aIndex);
    AString getDatetimeString(in unsigned long aIndex);
    AString getDateString(in unsigned long aIndex);
    AString getTimeString(in unsigned long aIndex);
    
    // data will be NULL if dataSize = 0
    void getBlob(in unsigned long aIndex, out unsigned long aDataSize, [array,size_is(aDataSize)] out octet aData);
    AUTF8String getUTF8Text(in unsigned long aIndex);
    boolean getIsNull(in unsigned long aIndex);

    /**
   *
   * wrapper for const char *sqlite3_column_decltype(sqlite3_stmt *, int i)
   *
   * @param    aParamIndex index of the column in the statement.  0 is the 1st column.
   * @returns  an AString type of the column
   *
   */
    AUTF8String getColumnDecltype(in unsigned long aParamIndex);

    AUTF8String getColumnName(in unsigned long aParamIndex);
};

