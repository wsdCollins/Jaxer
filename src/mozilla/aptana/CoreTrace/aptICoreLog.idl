/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 * vim: set sw=4 ts=4 et: */
/* ***** BEGIN LICENSE BLOCK *****
 *  Version: GPL 3
 * 
 *  This program is Copyright (C) 2007-2008 Aptana, Inc. All Rights Reserved
 *  This program is licensed under the GNU General Public license, version 3 (GPL).
 * 
 *  This program is distributed in the hope that it will be useful, but
 *  AS-IS and WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE, TITLE, or
 *  NONINFRINGEMENT. Redistribution, except as permitted by the GPL,
 *  is prohibited.
 * 
 *  You can redistribute and/or modify this program under the terms of the GPL, 
 *  as published by the Free Software Foundation.  You should
 *  have received a copy of the GNU General Public License, Version 3 along
 *  with this program; if not, write to the Free Software Foundation, Inc., 51
 *  Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *  
 *  Aptana provides a special exception to allow redistribution of this file
 *  with certain other code and certain additional terms
 *  pursuant to Section 7 of the GPL. You may view the exception and these
 *  terms on the web at http://www.aptana.com/legal/gpl/.
 *  
 *  You may view the GPL, and Aptana's exception and additional terms in the file
 *  titled license-jaxer.html in the main distribution folder of this program.
 *  
 *  Any modifications to this file must keep this entire header intact.
 * 
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface aptICoreLogListener;

[scriptable, uuid(242491C1-6C5A-4887-A8C0-B4114DB1674B)]
interface aptICoreLog : nsISupports {
    
    attribute boolean forceTrace;

	
	// The following one method should replace the others.
	// type -- must be one of the consts defined blow
	// from -- a string identifying the src, eg "[JS Framework]"
	// message -- a string
	void log(in long type, in ACString from, in ACString message);

	// These should match src/Utils/JaxerLog/log.h
	const long eTRACE = 0;
	const long eDEBUG = 1;
	const long eINFO = 2;
	const long eWARN = 3;
	const long eERROR = 4;
	const long eFATAL = 5;
	const long eNOTICE = 6;

    void fatal(in ACString message);
    void error(in ACString message);
    void warning(in ACString message);
    void info(in ACString message);
    void debug(in ACString message);
    void trace(in ACString message);
    void logString(in ACString message);

    void registerListener(in aptICoreLogListener listener);
    void unregisterListener(in aptICoreLogListener listener);
};

[scriptable, uuid(EB2E6192-E024-4de7-8395-A468C771BD15)]
interface aptICoreLogListener : nsISupports
{
    void observe(in long type, in ACString message);
};

%{C++
#define APT_CORELOG_CID				\
{ /* {242491C1-6C5A-4887-A8C0-B4114DB1674B} */	\
0x242491c1, 0x6c5a, 0x4887,			\
{ 0xa8, 0xc0, 0xb4, 0x11, 0x4d, 0xb1, 0x67, 0x4b } }
#define APT_CORELOG_CONTRACTID	\
"@aptana.com/log;1"
%}
