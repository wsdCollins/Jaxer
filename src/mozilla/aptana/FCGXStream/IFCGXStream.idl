/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 * vim: set sw=4 ts=4 et: */
/* ***** BEGIN LICENSE BLOCK *****
 *  Version: GPL 3
 * 
 *  This program is Copyright (C) 2007-2008 Aptana, Inc. All Rights Reserved
 *  This program is licensed under the GNU General Public license, version 3 (GPL).
 * 
 *  This program is distributed in the hope that it will be useful, but
 *  AS-IS and WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE, TITLE, or
 *  NONINFRINGEMENT. Redistribution, except as permitted by the GPL,
 *  is prohibited.
 * 
 *  You can redistribute and/or modify this program under the terms of the GPL, 
 *  as published by the Free Software Foundation.  You should
 *  have received a copy of the GNU General Public License, Version 3 along
 *  with this program; if not, write to the Free Software Foundation, Inc., 51
 *  Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *  
 *  Aptana provides a special exception to allow redistribution of this file
 *  with certain other code and certain additional terms
 *  pursuant to Section 7 of the GPL. You may view the exception and these
 *  terms on the web at http://www.aptana.com/legal/gpl/.
 *  
 *  You may view the GPL, and Aptana's exception and additional terms in the file
 *  titled license-jaxer.html in the main distribution folder of this program.
 *  
 *  Any modifications to this file must keep this entire header intact.
 * 
 * ***** END LICENSE BLOCK ***** */
#include "nsIInputStream.idl"

// Represents the protocol for communicating with a web server.  It subclasses
// nsIInputStream so that Mozilla can receive an HTML document for parsing via
// this interface;

[uuid(67ffc180-02b8-4561-a1c4-1375dd1e6167)]
interface IFCGXStream : nsIInputStream
{
    // Initialize FCGXStream
    //void Init();

    // Is the stream open?  It can be closed at any time due to a socket
    // or protocol error, and this should be tested frequently.
    boolean IsOpen();

	// Is a Hello exchange needed?
	// boolean IsHelloExchangeNeeded();

    // Exchange Hello blocks with the other end.  Must be called immediately
    // after a stream is created.
    // void ExchangeHello();

    // Wait for the next request to arrive.  The request type is returned.
    // The stream must be idle; it will be active upon return.
    //const long RT_HTMLDocument      = 0;
    const long RT_Handler = 1;
    const long RT_Filter = 2;
    long NextRequest();

    // Get the number of HTTP headers.  Must be called after NextRequest.
    long GetRequestHeaderCount();

    // Get the next header name and value.
    void GetRequestHeader(out AUTF8String name, out AUTF8String value);

    // Get the number of Response headers.  Must be called after all Request headers
    // are fetched.  And must NOT be called if request type is RT_Handler
    long GetResponseHeaderCount();

    // Get the next response header name and value.
    void GetResponseHeader(out AUTF8String name, out AUTF8String value);


    // Get the environment variables.  Must be called after all HTTP headers
    // are fetched.
    long GetEnvVarCount();
    void GetEnvVar(out AUTF8String name, out AUTF8String value);

    // Begin receiving document.  Must be called after all HTTP headers and
    // environment variables are fetched.
    void BeginDocumentReceive();

    // Request post data.  Must be called after BeginDocumentReceive.  Until
    // ResumeDocumentReceive is called, the Read method will read the post data
    // stream instead of the document stream.
    void RequestPostData();
    void ResumeDocumentReceive();

    // Receive EndRequest block.
    void GetEndRequest();

    // Send HTTP response headers.  Must be called after GetEndRequest.
    void BeginHTTPResponseHeaders(in long count);
    void SendHeader(in AUTF8String name, in AUTF8String value);

    // Send response body.  Must be called after SendHeader.  After EndResponse
    // has been called, the stream becomes idle.
    void BeginResponse();
    void SendResponseFragment([size_is(aLength)] in string aString, in PRUint32 aLength);
    void EndResponse();

    // Used in place of SendResponseFragment.  The cached doc will be sent back.
    void SendOriginalDoc();

    boolean IsSocketValid();

    void SetWebSocket(in long socket);
};
