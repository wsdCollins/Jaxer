// Notes and comments regarding references and cycles via JSON

// If the data to be serialized is a primitive type, then that type is
// returned. This will be true for booleans, numbers, and strings, although
// strings may require some escape sequences.

// Composite types, objects and arrays, will be serialized normally if they do
// not contain any references.

// If a composite type has a reference, then the top-most data structure must
// be an array and the return object will be the first item in that array. Most
// references will be forward references; however, back references are allowed
// (and needed when cycles are present).

// As the reference array is processed, forward references will be placed in an
// array. The index of the array corresponds to the reference index. The value
// of the item in the array will be an array of References each containing the
// object and property to set once the reference has been resolved. As
// references are resolved, they will replace the Reference in the array so
// that future references can grab the value directly.

// Serialization consists of a breadth-first traversal of the object graph. As
// composite objects are encountered, they will be pushed into a reference
// array. Primitive values will be serialized inline. Composite references will
// be pushed onto the reference array and its reference id will be used in its
// place. The reference array will continue to be processed until all elements
// in the array have been visited. Of course, as references are processed, new
// references may be added to this reference array

// The process of identifying objects that have been visited or need to be added
// to the reference queue will be done via an id attribute. Each object will by
// keyed as they are encountered with this key being placed directly on the
// object. Once serialization has completed, all keys will be removed from the
// objects so as not to interfere with future serializations. Alternately, we
// could generate a unique key based on the current time and a random number and
// leave that value around for use in future serializations. The usefulness of
// that approach is TBD.

// Following are a series of samples of JSON with reference and cycle support

// boolean
true
false

// number
10
-10
10.5
-10.5
10.5e50
-10.5e50
10.5e-50
-10.5e-50

// string
"testing"

// array
[]
[ true ]
[ false ]
[ 10 ]
[ -10 ]
[ 10.5 ]
[ -10.5 ]
[ 10.5e50 ]
[ -10.5e50 ]
[ 10.5e-50 ]
[ -10.5e-50 ]
[ "testing" ]

// object
{}
{
	"a": true,
	"b": false
}
{
	"a": 10,
	"b": -10,
	"c": 10.5,
	"d": -10.5,
	"e": 10.5e50,
	"f": -10.5e50,
	"g": 10.5e-50,
	"h": -10.5e-50
}
{ "a": "testing" }
{ "a": [] }

// references in array
[
	// this is the return value: an array of arrays
	// this is the first reference (id = 0)
	[
		[ "~1~", "~1~" ],
		[ "~1~", "~2~" ],
		[ "~2~", "~2~" ]
	],
	{ "aa": 10, "ab": true, "ac": "test" },
	{ "ba": "hello", "bb": 10, "bc": false }
]

// references in reference
[
	// this is the return value: an object
	// this is the first reference (id = 0)
	{ "name": "html", "children": "~1~" },
	[ "~2~", "~3~" ],
	{ "name": "head", "children": [] },
	{ "name": "body", "children": [] }
]

// cycles in references
[
	// this is the return value: an object
	// this is the first reference (id = 0)
	{ "name": "html", "parent": null, "children": "~1~" },
	[ "~2~", "~3~" ],
	{ "name": "head", "parent": "~0~", "children": [] },
	{ "name": "body", "parent": "~0~", "children": [] }
]
